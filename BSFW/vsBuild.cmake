cmake_minimum_required(VERSION 3.1.2)

set(PROJECT_NAME BSFW)
project(${PROJECT_NAME})

if ( "x${CMAKE_CONFIGURATION_TYPES}" STREQUAL "xRelease")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi /MD")
	set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF")
else()
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
endif()

add_definitions("-DUNICODE" "-D_UNICODE")

file(GLOB_RECURSE ${PROJECT_NAME}_SOURCE
		Src/*.cpp)

add_library(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_SOURCE})

target_include_directories(
	${PROJECT_NAME}
	PRIVATE
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}/Src
	${CMAKE_INCLUDE_CURRENT_DIR}
)

if (CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
	include(MSVC_Structed.cmake)
	assign_source_group(${${PROJECT_NAME}_SOURCE})
endif()

install( DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/${CMAKE_CONFIGURATION_TYPES} DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/bin FILES_MATCHING PATTERN "*.lib" PATTERN "*.pdb" PATTERN "*.dll")

install( DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Export DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/bin FILES_MATCHING PATTERN "*.h")